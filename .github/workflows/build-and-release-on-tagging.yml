name: Build & Release Electron App

permissions:
  contents: write # Required for creating releases and uploading assets
  actions: read # Required for downloading artifacts

on:
  push:
    tags:
      - "v*" # Trigger only on version tags (e.g., v1.0.0)
  workflow_dispatch:

jobs:
  build:
    timeout-minutes: 60
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Create and import self-signed certificate
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          # Create a temporary keychain
          security create-keychain -p actions temp.keychain
          security default-keychain -s temp.keychain
          security unlock-keychain -p actions temp.keychain
          security set-keychain-settings -lut 21600 temp.keychain
          
          # Generate certificate
          cat > cert.conf << EOF
          [ req ]
          default_bits       = 2048
          distinguished_name = req_distinguished_name
          x509_extensions    = v3_ca
          prompt             = no
          
          [ req_distinguished_name ]
          CN = VariableTesterSelfSign
          
          [ v3_ca ]
          basicConstraints = critical,CA:TRUE
          keyUsage = critical,digitalSignature,keyEncipherment
          extendedKeyUsage = codeSigning
          EOF
          
          openssl req -new -x509 -days 365 -nodes -config cert.conf \
            -keyout cert.key -out cert.crt
          openssl pkcs12 -export -out cert.p12 -inkey cert.key -in cert.crt -passout pass:temppass
          security import cert.p12 -k temp.keychain -P temppass -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k actions temp.keychain
          security list-keychains -d user -s temp.keychain login.keychain
          
          # Store the identity for electron-builder
          echo "CSC_NAME=VariableTesterSelfSign" >> $GITHUB_ENV
          echo "CSC_KEYCHAIN=temp.keychain" >> $GITHUB_ENV
          
          rm cert.conf cert.key cert.crt cert.p12

      - name: Build
        timeout-minutes: 45
        shell: bash
        env:
          GITHUB_TOKEN: ""
          GH_TOKEN: ""
          CI: ""
          DEBUG: "electron-builder"
          CSC_NAME: ${{ env.CSC_NAME }}
          CSC_KEYCHAIN: ${{ env.CSC_KEYCHAIN }}
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            npm run build:electron -- --mac --publish=never
          else
            npm run build:electron -- --win --publish=never
          fi

      - name: Verify Gatekeeper assessment
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          for APP_PATH in dist/mac*/*.app; do
            echo "Verifying Gatekeeper assessment for $APP_PATH"
            spctl --assess --type execute --verbose=4 "$APP_PATH" || true
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifacts
          path: dist/*
          retention-days: 7
          compression-level: 6
        timeout-minutes: 15

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**/Variable Tester-Setup-*.dmg
            dist/**/Variable Tester-Setup-*.zip
            dist/**/Variable Tester-Setup-*.exe
            dist/**/latest*.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    if: always() # run no matter what happened before
    needs: [build, release]
    steps:
      - name: Send NTFY notification
        run: |
          if [ "${{ needs.build.result }}" == "failure" ] || [ "${{ needs.release.result }}" == "failure" ]; then
            STATUS="failure"
          elif [ "${{ needs.build.result }}" == "cancelled" ] || [ "${{ needs.release.result }}" == "cancelled" ]; then
            STATUS="cancelled"
          elif [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.release.result }}" == "success" ]; then
            STATUS="success"
          else
            STATUS="completed with issues"
          fi
          
          curl -X POST \
            -H "Title: GitHub Actions - Variable Tester" \
            -H "Tags: $( [ "$STATUS" == "success" ] && echo "white_check_mark" || echo "x" )" \
            -d "Build ${{ github.ref_name }} finished with status: $STATUS" \
            ${{ secrets.NTFY_ENDPOINT }}
