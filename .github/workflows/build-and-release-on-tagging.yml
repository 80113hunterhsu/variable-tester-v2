name: Build & Release Electron App

permissions:
  contents: write # Required for creating releases and uploading assets
  actions: read # Required for downloading artifacts

on:
  push:
    tags:
      - "v*" # Trigger only on version tags (e.g., v1.0.0)
  workflow_dispatch:

jobs:
  build:
    timeout-minutes: 60
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Create and import self-signed certificate
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          # Create a temporary keychain
          security create-keychain -p actions temp.keychain
          security default-keychain -s temp.keychain
          security unlock-keychain -p actions temp.keychain
          security set-keychain-settings -lut 21600 temp.keychain

          # Generate self-signed certificate
          security create-keypair -k temp.keychain

          # Create certificate
          cat > cert.conf << EOF
          [ req ]
          default_bits       = 2048
          distinguished_name = req_distinguished_name
          x509_extensions    = v3_ca
          prompt             = no

          [ req_distinguished_name ]
          CN = VariableTesterSelfSign

          [ v3_ca ]
          basicConstraints = critical,CA:TRUE
          keyUsage = critical,digitalSignature,keyEncipherment
          extendedKeyUsage = codeSigning
          EOF

          # Generate certificate and key
          openssl req -new -x509 -days 365 -nodes -config cert.conf \
            -keyout cert.key -out cert.crt

          # Convert to p12
          openssl pkcs12 -export -out cert.p12 -inkey cert.key -in cert.crt -passout pass:temppass

          # Import to keychain
          security import cert.p12 -k temp.keychain -P temppass -T /usr/bin/codesign

          # Set partition list
          security set-key-partition-list -S apple-tool:,apple: -s -k actions temp.keychain

          # Add to search list
          security list-keychains -d user -s temp.keychain login.keychain

          # Find the certificate identity
          security find-identity -v -p codesigning temp.keychain

          # Clean up
          rm cert.conf cert.key cert.crt cert.p12

      - name: Build
        timeout-minutes: 45
        shell: bash
        env:
          GITHUB_TOKEN: "" # Disable auto-publish
          GH_TOKEN: ""
          CI: ""
          DEBUG: "electron-builder"
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            npm run build:electron -- --mac --publish=never
          else
            npm run build:electron -- --win --publish=never
          fi

      - name: Self-sign macOS apps
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          # Get the certificate SHA-1 hash
          CERT_IDENTITY=$(security find-identity -v -p codesigning temp.keychain | grep "VariableTesterSelfSign" | head -1 | awk '{print $2}')

          for APP_PATH in dist/mac*/*.app; do
            echo "Signing $APP_PATH with self-signed cert"
            codesign --deep --force --sign "$CERT_IDENTITY" "$APP_PATH" --keychain temp.keychain
            echo "Verifying codesign for $APP_PATH"
            codesign --verify --deep --strict --verbose=2 "$APP_PATH"
          done

      - name: Verify Gatekeeper assessment
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          for APP_PATH in dist/mac*/*.app; do
            echo "Verifying Gatekeeper assessment for $APP_PATH"
            spctl --assess --type execute --verbose=4 "$APP_PATH" || true
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifacts
          path: dist/*
          retention-days: 7
          compression-level: 6
        timeout-minutes: 15

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**/Variable Tester-Setup-*.dmg
            dist/**/Variable Tester-Setup-*.zip
            dist/**/Variable Tester-Setup-*.exe
            dist/**/latest*.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    if: always() # run no matter what happened before
    needs: [build, release]
    steps:
      - name: Send NTFY notification
        run: |
          STATUS="${{ job.status }}"
          curl -X POST \
            -H "Title: GitHub Actions" \
            -d "Workflow finished with status: $STATUS" \
            ${{ secrets.NTFY_ENDPOINT }}
